/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN StatesActionsGenerated.js PLEASE EDIT ../StatesActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import StatesApi from "../../../api/StatesApi";

let actionsFunction = {

  //CRUD METHODS

  // Create states
  createStates: function(states) {
    return function(dispatch) {
      return StatesApi
        .createStates(states)
        .then(states => {
          dispatch(actionsFunction.createStatesSuccess(states));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createStatesSuccess: function(states) {
    return { type: types.CREATE_STATES_SUCCESS, payload: states };
  },


  // Delete states
  deleteStates: function(id) {
    return function(dispatch) {
      return StatesApi
        .deleteStates(id)
        .then(states => {
          dispatch(actionsFunction.deleteStatesSuccess(states));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteStatesSuccess: function(states) {
    return { type: types.DELETE_STATES_SUCCESS, payload: states };
  },


  // Get states
  loadStates: function(id) {
    return function(dispatch) {
      return StatesApi
        .getOneStates(id)
        .then(states => {
          dispatch(actionsFunction.loadStatesSuccess(states));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadStatesSuccess: function(states) {
    return { type: types.GET_STATES_SUCCESS, payload: states };
  },

  // Load  list
  loadStatesList: function() {
    return function(dispatch) {
      return StatesApi
        .getStatesList()
        .then(list => {
          dispatch(actionsFunction.loadStatesListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadStatesListSuccess: function(list) {
    return { type: types.LIST_STATES_SUCCESS, payload: list };
  },

	
  // Save states
  saveStates: function(states) {
    return function(dispatch) {
      return StatesApi
        .saveStates(states)
        .then(states => {
          dispatch(actionsFunction.saveStatesSuccess(states));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveStatesSuccess: function(states) {
    return { type: types.UPDATE_STATES_SUCCESS, payload: states };
  },


};

export default actionsFunction;
